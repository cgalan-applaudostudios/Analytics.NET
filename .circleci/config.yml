version: 2.1

_run:
    notify_on_fail: &notify_on_fail
      when: on_fail
      command: |
        wget https://raw.githubusercontent.com/segmentio/circleci-notifications/master/slack-notify-branch.sh
        chmod u+x slack-notify-branch.sh
        BUILD_STATUS="Failed" NOTIFY_BRANCH="master scheduled_e2e_testing" ./slack-notify-branch.sh
orbs:
  win: circleci/windows@2.2.0


jobs:
  build:
    working_directory: /temp
    docker:
      - image: mono:latest
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      # Update mono to latest version (5.8)
      - run: echo "deb http://download.mono-project.com/repo/ubuntu trusty main" | tee /etc/apt/sources.list.d/mono-official.list
      - run: apt-get update
      - run: apt-get install -y mono-devel
      # Checkout source code and try to build & pack
      - checkout
      - run: msbuild Analytics/Analytics.csproj /t:restore
      - run: msbuild Analytics/Analytics.csproj /p:Configuration=Release
      - run: msbuild Analytics.NetStandard20/Analytics.NetStandard20.csproj /t:restore
      - run: msbuild Analytics.NetStandard20/Analytics.NetStandard20.csproj /p:Configuration=Release
      - run: msbuild Analytics.Net35/Analytics.Net35.csproj /t:restore
      - run: msbuild Analytics.Net35/Analytics.Net35.csproj /p:Configuration=Release
      - run: msbuild Analytics.Net45/Analytics.Net45.csproj /t:restore
      - run: msbuild Analytics.Net45/Analytics.Net45.csproj /p:Configuration=Release
      - run: msbuild Analytics.Portable/Analytics.Portable.csproj /t:restore
      - run: msbuild Analytics.Portable/Analytics.Portable.csproj /p:Configuration=Release
      - run: nuget pack Analytics.nuspec
  coverage:
    working_directory: /coverage
    docker:  
      - image: microsoft/dotnet:2.2-sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - run:
          name: Install minicover tool
          command: |
            echo 'export PATH=$HOME/.dotnet/tools:$PATH' >> $BASH_ENV
            dotnet tool install -g minicover --version 3.0.6
      - checkout
      - run: chmod +x Test.NetStandard20/coverage_report.sh
      - run: cd Test.NetStandard20 && ./coverage_report.sh
      - run: bash <(curl -s https://codecov.io/bash)
  coverage_net35:
    working_directory: /coverage_net35
    executor:  
      name: win/default
    steps:
      - run:
          name: Install code coverage tools
          command: |
            choco install opencover.portable
            dotnet tool install -g dotnet-reportgenerator-globaltool --version 4.4.7
      - checkout
      - run: nuget restore Test.Net35/Test.Net35.csproj -SolutionDirectory ./
      - run: msbuild Test.Net35/Test.Net35.csproj /t:restore
      - run: msbuild Test.Net35/Test.Net35.csproj /p:Configuration=Debug
      - run: OpenCover.Console.exe "-target:./packages/NUnit.ConsoleRunner.3.7.0/tools/nunit3-console.exe" "-register:user" "-output:opencover.xml" "-targetargs:.\Test.Net35\bin\Debug\Test.Net35.dll" -filter:"+[Analytics*]* -[Test*]*"
      - run: 
          name: "Validating coverage"
          command: | 
            & .\ValidateCoverage.ps1 -threshold 80
      - run: 
          command: bash <(curl -s https://codecov.io/bash) -f ./opencover.xml
          shell: bash.exe
  coverage_net45:
    working_directory: /coverage_net45
    executor:  
      name: win/default
    steps:
      - run:
          name: Install code coverage tools
          command: |
            choco install opencover.portable
            dotnet tool install -g dotnet-reportgenerator-globaltool --version 4.4.7
      - checkout
      - run: nuget restore Test.Net45/Test.Net45.csproj -SolutionDirectory ./
      - run: msbuild Test.Net45/Test.Net45.csproj /t:restore
      - run: msbuild Test.Net45/Test.Net45.csproj /p:Configuration=Debug
      - run: OpenCover.Console.exe "-target:./packages/NUnit.ConsoleRunner.3.7.0/tools/nunit3-console.exe" "-register" "-output:opencover.xml" "-targetargs:.\Test.Net45\bin\Debug\Test.Net45.dll" -filter:"+[Analytics*]* -[Test*]*"
      - run: 
          name: "Validating coverage"
          command: | 
            & .\ValidateCoverage.ps1 -threshold 80
      - run: 
          command: bash <(curl -s https://codecov.io/bash) -f ./opencover.xml
          shell: bash.exe
  test:
    working_directory: /test
    docker:
      - image: microsoft/dotnet:2.1-sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: dotnet restore Test/Test.csproj
      - run: dotnet test Test/Test.csproj
  test_20:
    working_directory: /test20
    docker:
      - image: microsoft/dotnet:2.0-sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: dotnet restore Test.NetStandard20/Test.NetStandard20.csproj
      - run: dotnet test Test.NetStandard20/Test.NetStandard20.csproj
  test_35:
    working_directory: /test35
    docker:
      - image: mono:latest
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: nuget restore Test.Net35/Test.Net35.csproj -SolutionDirectory ./
      - run: msbuild Test.Net35/Test.Net35.csproj /t:restore
      - run: msbuild Test.Net35/Test.Net35.csproj /p:Configuration=Release
      - run: mono --debug ./packages/NUnit.ConsoleRunner.3.7.0/tools/nunit3-console.exe Test.Net35/bin/Release/Test.Net35.dll
  test_45:
    working_directory: /test45
    docker:
      - image: mono:latest
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: nuget restore Test.Net45/Test.Net45.csproj -SolutionDirectory ./
      - run: msbuild Test.Net45/Test.Net45.csproj /t:restore
      - run: msbuild Test.Net45/Test.Net45.csproj /p:Configuration=Release
      - run: mono --debug ./packages/NUnit.ConsoleRunner.3.7.0/tools/nunit3-console.exe Test.Net45/bin/Release/Test.Net45.dll
  test_e2e:
    working_directory: /test_e2e
    docker:
      - image: microsoft/dotnet:1.1.1-sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: dotnet restore Test.E2E/Test.E2E.csproj
      - run: dotnet build Test.E2E/Test.E2E.csproj
      - run: cd Test.E2E/ && ./e2e.sh
      - run: *notify_on_fail
  build_di:
    working_directory: /di
    docker:  
      - image: microsoft/dotnet:2.2-sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: dotnet build -c Release DI/Analytics.Extensions.Microsoft.DependencyInjection/Analytics.Extensions.Microsoft.DependencyInjection.csproj
  test_di:
    working_directory: /test_di
    docker:
      - image: microsoft/dotnet:3.1-sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: dotnet test DI/Analytics.Extensions.Microsoft.DependencyInjection.Test/Analytics.Extensions.Microsoft.DependencyInjection.Test.csproj
  pack_di:
    working_directory: /pack_di
    docker:  
      - image: microsoft/dotnet:2.2-sdk
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OUTPUT: 1
    steps:
      - checkout
      - run: dotnet build pack -o /packages -c Release DI/Analytics.Extensions.Microsoft.DependencyInjection/Analytics.Extensions.Microsoft.DependencyInjection.csproj
      - store_artifacts:
          path: /packages/

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - coverage
      - coverage_net35  
      - coverage_net45
      - test
      - test_20
      - test_35
      - test_45
      - test_e2e
      - build_di
      - test_di:
          requires:
            - build_di
      - pack_di:
          requires:
            - test_di
  scheduled_e2e_test:
    triggers:
      - schedule:
          cron: "25 * * * *"
          filters:
            branches:
              only:
                - master
                - scheduled_e2e_testing
    jobs:
      - test_e2e
